//*************************************
// Adapter: SynthAdapter
// Sequence: importFromXM
// UserDataBlock: adapter init data
//*************************************

// register synth adapter before using it
// this can be automatic processing the
// plugin directory of the editor
Asu.registerAdapter(SynthAdapter.Info);

static void Asu.registerAdapter(AdapterInfo info) {
  Asu.adapterMap.put(info.id, info);
}

Asu Syn.createSong(string xmPath) {
  var asu = new Asu();
  var sa = new SynthAdapter();
  // missing: create init data using a dialog
  var length = Syn.createInitData(sa, out data);
  var udb = asu.addUserDataBlock(length, data);
  asu.addAdapter(SynthAdapter.Info.id, udb);
  asu.importFromXM(xmPath);
  return asu;
}

// bank configuration
//  - number of instruments
//  - instrument desciption as binary data
byte[] bankConfig = { ... };

// synth configuration
// - number of synths
// - synth configurations: voice count
byte[] synthConfig = { ... };

int Syn.createInitData(out byte[] data) {
  var length = sizeof(bankCfg) + sizeof(synthCfg);
  data = new byte[length];
  memcpy(data, bankConfig);
  memcpy(data, synthConfig);
  return length;
}

int Asu.addUserDataBlock(int size, byte[] data)
// use map to reference data blocks index-independenly
  var udbId = this.userDataBlockMap.length;
  var udb = new UserDataBlock(size, data);
  this.userDataBlockMap.put(udbId, udb);
  return udbId;
}

void Asu.addAdapter(int id, int udbId)
  var adapterInfo = Asu.adapterMap.get(id);
  if (adapterInfo == null) return null;
  AdapterData adapterData(adapterInfo, udbId);
  this.adapters.add(adapterData);
}
